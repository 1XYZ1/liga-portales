---
import Layout from '../layouts/Layout.astro';
import { type Match, matches } from '../../data/matches';
import { type Team, teams } from '../../data/teams';

// Agrupar partidos por semana
const matchesByWeek = matches.reduce((acc: Record<number, Match[]>, match: Match) => {
  if (!acc[match.week]) {
    acc[match.week] = [];
  }
  acc[match.week].push(match);
  return acc;
}, {});

// Ordenar las semanas
const weeks = Object.keys(matchesByWeek)
  .map(Number)
  .sort((a, b) => a - b);

const getTeamName = (teamId: number): string => {
  return teams.find((team: Team) => team.id === teamId)?.name || 'Equipo no encontrado';
};

const getMatchStatus = (status: Match['status']): string => {
  switch (status) {
    case 'finished':
      return 'Finalizado';
    case 'scheduled':
      return 'Programado';
    case 'cancelled':
      return 'Cancelado';
    default:
      return 'Desconocido';
  }
};
---
<Layout title="Calendario" description="Calendario completo de la liga con todos los partidos y resultados.">
  <div class="calendario-container">
    <h1 class="text-4xl font-bold text-center mb-12 text-white relative">
      <span class="relative z-10">Calendario de la Liga</span>
      <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-16 h-16 bg-contain bg-center bg-no-repeat z-0 opacity-20" style="background-image: url('/images/soccer-ball.svg');"></div>
    </h1>

    <!-- Navegación rápida -->
    <div class="flex flex-wrap justify-center gap-4 mb-12">
      {weeks.map((week) => (
        <a
          href={`#semana-${week}`}
          class="px-4 py-2 bg-blue-700 text-white rounded-lg hover:bg-blue-600 transition-colors shadow-lg border border-blue-500"
        >
          Semana {week}
        </a>
      ))}
    </div>

    <div class="space-y-12">
      {weeks.map((week: number) => (
        <div id={`semana-${week}`} class="bg-gray-800 bg-opacity-80 rounded-lg shadow-xl p-6 scroll-mt-8 border border-blue-700">
          <h2 class="text-2xl font-bold mb-6 text-white flex items-center">
            <span class="mr-2">⚽</span> Semana {week}
          </h2>
          <div class="grid gap-6">
            {matchesByWeek[week].map((match: Match) => (
              <div class="border border-blue-600 rounded-lg p-4 hover:shadow-blue-500/50 hover:shadow-md transition-all bg-gray-900 bg-opacity-90">
                <div class="flex flex-col md:flex-row justify-between items-center gap-4">
                  <div class="flex-1 text-center md:text-right">
                    <span class="font-semibold text-lg text-white">
                      {getTeamName(match.homeTeam)}
                    </span>
                  </div>

                  <div class="flex items-center space-x-4">
                    {match.status === 'finished' ? (
                      <div class="text-2xl font-bold text-white bg-blue-900 px-4 py-2 rounded-lg border border-blue-500">
                        {match.homeScore} - {match.awayScore}
                      </div>
                    ) : (
                      <div class="text-lg text-blue-300 bg-blue-900 px-4 py-2 rounded-lg border border-blue-500">VS</div>
                    )}
                  </div>

                  <div class="flex-1 text-center md:text-left">
                    <span class="font-semibold text-lg text-white">
                      {getTeamName(match.awayTeam)}
                    </span>
                  </div>
                </div>

                <div class="mt-4 text-sm text-blue-200 text-center">
                  <div>
                    {new Date(match.date + 'T00:00:00').toLocaleDateString('es-ES', {
                      weekday: 'long',
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })} - {match.time}
                  </div>
                  <div class="mt-1">
                    <span class={`inline-block px-2 py-1 rounded-full text-xs ${
                      match.status === 'finished'
                        ? 'bg-green-900 text-green-200 border border-green-500'
                        : match.status === 'scheduled'
                        ? 'bg-blue-900 text-blue-200 border border-blue-500'
                        : 'bg-red-900 text-red-200 border border-red-500'
                    }`}>
                      {getMatchStatus(match.status)}
                    </span>
                  </div>
                  <div class="mt-1 text-gray-300">
                    <span class="inline-flex items-center">
                      <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
                      </svg>
                      {match.stadium}
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      ))}
    </div>
  </div>
</Layout>

<style>
  html {
    scroll-behavior: smooth;
  }

  .calendario-container {
    background: linear-gradient(135deg, #0f172a 0%, #1e3a8a 100%);
    min-height: 100vh;
    padding: 2rem 1rem;
    position: relative;
    overflow: hidden;
  }

  .calendario-container::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: url('/images/pattern-soccer.svg');
    background-size: 300px;
    opacity: 0.05;
    pointer-events: none;
    z-index: 0;
  }

  .calendario-container > * {
    position: relative;
    z-index: 1;
    max-width: 1200px;
    margin-left: auto;
    margin-right: auto;
  }

  @media (max-width: 768px) {
    .calendario-container {
      padding: 1rem 0.5rem;
    }
  }
</style>